




#given p, D and a field K=Q(sqrt{DK}) says if K is valid or not
def is_good_K(D,p,DK):
	if DK.is_square() or DK<0:
		return False
	K=QuadraticField(DK)
	
	if all(K.ideal(q).is_prime() for q in D.prime_divisors()) and K.ideal(p).is_prime():
		return True
	else:	
		return False

'''

#says true if -p has a square root in the algebra of discriminant D
def is_good_p(D,p):
	p1=D.factor()[0][0];p2=D.factor()[1][0]
	K=QuadraticField(-p)
	print K
	f1=K.ideal(p1).factor()
	f2=K.ideal(p2).factor()
	if len(f1)==1 and len(f2)==1 and f1[0][1]==1 and f2[0][1]==1:
		return True
	return False


#executar aquest bucle per trobar ternes [D,p,DK] valides (aqui D es el discriminant de l'algebra, p es el primer i DK el discriminant del cos). Una llista de ternes valides es aquesta:

good_6_p_DK=[]
good_10_p_DK=[]
good_22_p_DK=[]

for D in [22]:
	for p in prime_range(1,50):
#		if not is_good_p(D,p):
		if p.divides(D):
			continue
		
		for DK in range(1,600):
			
			if not is_fundamental_discriminant(DK):
				continue
			if is_good_K(D,p,DK):
				h=len(QuadraticField(DK).narrow_class_group())
				print 'p=',p,";    DK=",DK
				N=D*p
				
				try:
					E=EllipticCurve(N.str()+'a1')	
				except ValueError:
					continue
				good_22_p_DK.append([D,p,DK,'h+='+Integer(h).str(),'a_p=',E.ap(p)])
		
good_DK_30=[]
good_DK_42=[]
for DK in range(1,500):
	if not is_fundamental_discriminant(DK):
		continue
	if is_good_K(7,6,DK):
		good_DK_42.append(DK)

good_DK_78=[]
for DK in range(1,500):
	if not is_fundamental_discriminant(DK):
		continue
	if is_good_K(13,6,DK):
		good_DK_78.append(DK)

'''

E=EllipticCurve('268a1')
f=E.defining_polynomial()
R.<y>=QQ[] 
for a in range(1,400):
	if a%10==0:
		print 'a=',a
	for b in range(1,400):
		if gcd(a,b)>1:
			continue
		g=R(f(x=a/b,z=1))
		DK=g.discriminant().squarefree_part()
		if is_good_K(22,13,DK) and DK<1500:
			print 'x=',a/b,' DK=',DK
		


#D=6
[[6, 5, 53, 'h+=1', 'a_p=', -1],# no funciona ap=-1
 [6, 5, 77, 'h+=2', 'a_p=', -1],
 [6, 5, 173, 'h+=1', 'a_p=', -1],
 [6, 5, 197, 'h+=1', 'a_p=', -1],
 [6, 5, 293, 'h+=1', 'a_p=', -1],
 [6, 5, 317, 'h+=1', 'a_p=', -1],
 [6, 5, 413, 'h+=2', 'a_p=', -1],
 [6, 5, 437, 'h+=2', 'a_p=', -1],
 [6, 5, 533, 'h+=2', 'a_p=', -1],
 [6, 5, 557, 'h+=1', 'a_p=', -1],
 [6, 7, 5, 'h+=1', 'a_p=', -1],# funciona ap=-1
 [6, 7, 101, 'h+=1', 'a_p=', -1],
 [6, 7, 173, 'h+=1', 'a_p=', -1],
 [6, 7, 269, 'h+=1', 'a_p=', -1],
 [6, 7, 293, 'h+=1', 'a_p=', -1],
 [6, 7, 341, 'h+=2', 'a_p=', -1],
 [6, 7, 437, 'h+=2', 'a_p=', -1],
 [6, 7, 461, 'h+=1', 'a_p=', -1],
 [6, 7, 509, 'h+=1', 'a_p=', -1],
 [6, 11, 29, 'h+=1', 'a_p=', -1],
 [6, 11, 101, 'h+=1', 'a_p=', -1],
 [6, 11, 149, 'h+=1', 'a_p=', -1],
 [6, 11, 173, 'h+=1', 'a_p=', -1],
 [6, 11, 197, 'h+=1', 'a_p=', -1],
 [6, 11, 293, 'h+=1', 'a_p=', -1],
 [6, 11, 365, 'h+=2', 'a_p=', -1],
 [6, 11, 413, 'h+=2', 'a_p=', -1],
 [6, 11, 437, 'h+=2', 'a_p=', -1],
 [6, 11, 461, 'h+=1', 'a_p=', -1],
 [6, 11, 557, 'h+=1', 'a_p=', -1],
 [6, 13, 5, 'h+=1', 'a_p=', 1], # funciona, ap = 1
 [6, 13, 149, 'h+=1', 'a_p=', 1],# funciona?
 [6, 13, 197, 'h+=1', 'a_p=', 1], # funciona?
 [6, 13, 293, 'h+=1', 'a_p=', 1],
 [6, 13, 317, 'h+=1', 'a_p=', 1],
 [6, 13, 437, 'h+=2', 'a_p=', 1],
 [6, 13, 461, 'h+=1', 'a_p=', 1],
 [6, 13, 509, 'h+=1', 'a_p=', 1],
 [6, 13, 557, 'h+=1', 'a_p=', 1],
 [6, 17, 5, 'h+=1', 'a_p=', -1],
 [6, 17, 29, 'h+=1', 'a_p=', -1],
 [6, 17, 173, 'h+=1', 'a_p=', -1],
 [6, 17, 197, 'h+=1', 'a_p=', -1],
 [6, 17, 269, 'h+=1', 'a_p=', -1],
 [6, 17, 317, 'h+=1', 'a_p=', -1],
 [6, 17, 413, 'h+=2', 'a_p=', -1],
 [6, 17, 437, 'h+=2', 'a_p=', -1],
 [6, 17, 533, 'h+=2', 'a_p=', -1],
 [6, 17, 581, 'h+=2', 'a_p=', -1],
 [6, 19, 29, 'h+=1', 'a_p=', 1],# funciona, ap = 1
 [6, 19, 53, 'h+=1', 'a_p=', 1],
 [6, 19, 173, 'h+=1', 'a_p=', 1],
 [6, 19, 221, 'h+=4', 'a_p=', 1],
 [6, 19, 269, 'h+=1', 'a_p=', 1],
 [6, 19, 293, 'h+=1', 'a_p=', 1],
 [6, 19, 317, 'h+=1', 'a_p=', 1],
 [6, 19, 341, 'h+=2', 'a_p=', 1],
 [6, 19, 413, 'h+=2', 'a_p=', 1],
 [6, 19, 485, 'h+=2', 'a_p=', 1],
 [6, 19, 509, 'h+=1', 'a_p=', 1],
 [6, 23, 5, 'h+=1', 'a_p=', -1],
 [6, 23, 53, 'h+=1', 'a_p=', -1],
 [6, 23, 149, 'h+=1', 'a_p=', -1],
 [6, 23, 221, 'h+=4', 'a_p=', -1],
 [6, 23, 293, 'h+=1', 'a_p=', -1],
 [6, 23, 341, 'h+=2', 'a_p=', -1],
 [6, 23, 365, 'h+=2', 'a_p=', -1],
 [6, 23, 389, 'h+=1', 'a_p=', -1],
 [6, 23, 413, 'h+=2', 'a_p=', -1],
 [6, 23, 557, 'h+=1', 'a_p=', -1],
 [6, 29, 77, 'h+=2', 'a_p=', -1],
 [6, 29, 101, 'h+=1', 'a_p=', -1],
 [6, 29, 221, 'h+=4', 'a_p=', -1],
 [6, 29, 269, 'h+=1', 'a_p=', -1],
 [6, 29, 293, 'h+=1', 'a_p=', -1],
 [6, 29, 317, 'h+=1', 'a_p=', -1],
 [6, 29, 365, 'h+=2', 'a_p=', -1],
 [6, 29, 389, 'h+=1', 'a_p=', -1],
 [6, 29, 437, 'h+=2', 'a_p=', -1],
 [6, 29, 461, 'h+=1', 'a_p=', -1],
 [6, 29, 485, 'h+=2', 'a_p=', -1],
 [6, 29, 533, 'h+=2', 'a_p=', -1],
 [6, 31, 29, 'h+=1', 'a_p=', 1],# funciona?, ap = 1
 [6, 31, 53, 'h+=1', 'a_p=', 1],
 [6, 31, 77, 'h+=2', 'a_p=', 1],
 [6, 31, 197, 'h+=1', 'a_p=', 1],
 [6, 31, 269, 'h+=1', 'a_p=', 1],
 [6, 31, 365, 'h+=2', 'a_p=', 1],
 [6, 31, 389, 'h+=1', 'a_p=', 1],
 [6, 31, 437, 'h+=2', 'a_p=', 1],
 [6, 31, 461, 'h+=1', 'a_p=', 1],
 [6, 31, 509, 'h+=1', 'a_p=', 1],
 [6, 31, 533, 'h+=2', 'a_p=', 1],
 [6, 31, 557, 'h+=1', 'a_p=', 1],
 [6, 31, 581, 'h+=2', 'a_p=', 1],
 [6, 37, 5, 'h+=1', 'a_p=', 1],
 [6, 37, 29, 'h+=1', 'a_p=', 1],
 [6, 37, 341, 'h+=2', 'a_p=', 1],
 [6, 37, 365, 'h+=2', 'a_p=', 1],
 [6, 37, 389, 'h+=1', 'a_p=', 1],
 [6, 37, 413, 'h+=2', 'a_p=', 1],
 [6, 37, 461, 'h+=1', 'a_p=', 1],
 [6, 37, 533, 'h+=2', 'a_p=', 1],
 [6, 37, 557, 'h+=1', 'a_p=', 1],
 [6, 41, 29, 'h+=1', 'a_p=', -1],
 [6, 41, 53, 'h+=1', 'a_p=', -1],
 [6, 41, 101, 'h+=1', 'a_p=', -1],
 [6, 41, 149, 'h+=1', 'a_p=', -1],
 [6, 41, 293, 'h+=1', 'a_p=', -1],
 [6, 41, 317, 'h+=1', 'a_p=', -1],
 [6, 41, 341, 'h+=2', 'a_p=', -1],
 [6, 41, 413, 'h+=2', 'a_p=', -1],
 [6, 41, 437, 'h+=2', 'a_p=', -1],
 [6, 41, 485, 'h+=2', 'a_p=', -1],
 [6, 41, 509, 'h+=1', 'a_p=', -1],
 [6, 41, 557, 'h+=1', 'a_p=', -1],
 [6, 41, 581, 'h+=2', 'a_p=', -1],
 [6, 43, 5, 'h+=1', 'a_p=', -1],
 [6, 43, 29, 'h+=1', 'a_p=', -1],
 [6, 43, 77, 'h+=2', 'a_p=', -1],
 [6, 43, 149, 'h+=1', 'a_p=', -1],
 [6, 43, 389, 'h+=1', 'a_p=', -1],
 [6, 43, 413, 'h+=2', 'a_p=', -1],
 [6, 43, 437, 'h+=2', 'a_p=', -1],
 [6, 43, 485, 'h+=2', 'a_p=', -1],
 [6, 43, 581, 'h+=2', 'a_p=', -1],
 [6, 47, 5, 'h+=1', 'a_p=', -1],
 [6, 47, 29, 'h+=1', 'a_p=', -1],
 [6, 47, 77, 'h+=2', 'a_p=', -1],
 [6, 47, 221, 'h+=4', 'a_p=', -1],
 [6, 47, 293, 'h+=1', 'a_p=', -1],
 [6, 47, 317, 'h+=1', 'a_p=', -1],
 [6, 47, 389, 'h+=1', 'a_p=', -1],
 [6, 47, 461, 'h+=1', 'a_p=', -1],
 [6, 47, 485, 'h+=2', 'a_p=', -1],
 [6, 47, 509, 'h+=1', 'a_p=', -1],
 [6, 47, 557, 'h+=1', 'a_p=', -1]]



#D=10
[[10, 3, 53, 'h+=1', 'a_p=', 1],#no trobo punts naifs (de no torsio) d'altura <200 
 [10, 3, 77, 'h+=2', 'a_p=', 1],# no trobo punts naifs
 [10, 3, 173, 'h+=1', 'a_p=', 1],
 [10, 3, 197, 'h+=1', 'a_p=', 1],
 [10, 3, 293, 'h+=1', 'a_p=', 1],
 [10, 3, 317, 'h+=1', 'a_p=', 1],
 [10, 3, 413, 'h+=2', 'a_p=', 1],
 [10, 3, 437, 'h+=2', 'a_p=', 1],
 [10, 3, 533, 'h+=2', 'a_p=', 1],
 [10, 3, 557, 'h+=1', 'a_p=', 1],

 [10, 7, 13, 'h+=1', 'a_p=', -1],# no trobo punts naifs
 [10, 7, 157, 'h+=1', 'a_p=', -1],# no trobo punts naifs
 [10, 7, 173, 'h+=1', 'a_p=', -1],
 [10, 7, 213, 'h+=2', 'a_p=', -1],
 [10, 7, 237, 'h+=2', 'a_p=', -1],
 [10, 7, 293, 'h+=1', 'a_p=', -1],
 [10, 7, 397, 'h+=1', 'a_p=', -1],
 [10, 7, 437, 'h+=2', 'a_p=', -1],
 [10, 7, 453, 'h+=2', 'a_p=', -1],
 [10, 7, 493, 'h+=2', 'a_p=', -1],
 [10, 7, 517, 'h+=2', 'a_p=', -1],
 [10, 7, 573, 'h+=2', 'a_p=', -1],
 
 [10, 11, 13, 'h+=1', 'a_p=', 1],#P=(4 : 5/2*r - 5/2 : 1)
 [10, 11, 173, 'h+=1', 'a_p=', 1],
 [10, 11, 197, 'h+=1', 'a_p=', 1],
 [10, 11, 237, 'h+=2', 'a_p=', 1],
 [10, 11, 277, 'h+=1', 'a_p=', 1],
 [10, 11, 293, 'h+=1', 'a_p=', 1],
 [10, 11, 373, 'h+=1', 'a_p=', 1],
 [10, 11, 413, 'h+=2', 'a_p=', 1],
 [10, 11, 437, 'h+=2', 'a_p=', 1],
 [10, 11, 453, 'h+=2', 'a_p=', 1],
 [10, 11, 557, 'h+=1', 'a_p=', 1],
 
 [10, 13, 37, 'h+=1', 'a_p=', 1], #funciona (rank>1)
 [10, 13, 93, 'h+=2', 'a_p=', 1],
 [10, 13, 197, 'h+=1', 'a_p=', 1],
 [10, 13, 213, 'h+=2', 'a_p=', 1],
 [10, 13, 253, 'h+=2', 'a_p=', 1],
 [10, 13, 293, 'h+=1', 'a_p=', 1],
 [10, 13, 317, 'h+=1', 'a_p=', 1],
 [10, 13, 357, 'h+=4', 'a_p=', 1],
 [10, 13, 397, 'h+=1', 'a_p=', 1],
 [10, 13, 437, 'h+=2', 'a_p=', 1],
 [10, 13, 453, 'h+=2', 'a_p=', 1],
 [10, 13, 557, 'h+=1', 'a_p=', 1],
 #punts d'ordre infinit sobre Q (N=10*17) 
 [10, 17, 37, 'h+=1', 'a_p=', 1],#P=(0 : 2 : 1)
 [10, 17, 133, 'h+=2', 'a_p=', 1],
 [10, 17, 173, 'h+=1', 'a_p=', 1],
 [10, 17, 197, 'h+=1', 'a_p=', 1],
 [10, 17, 277, 'h+=1', 'a_p=', 1],
 [10, 17, 317, 'h+=1', 'a_p=', 1],
 [10, 17, 397, 'h+=1', 'a_p=', 1],
 [10, 17, 413, 'h+=2', 'a_p=', 1],
 [10, 17, 437, 'h+=2', 'a_p=', 1],
 [10, 17, 453, 'h+=2', 'a_p=', 1],
 [10, 17, 517, 'h+=2', 'a_p=', 1],
 [10, 17, 533, 'h+=2', 'a_p=', 1],
 [10, 17, 573, 'h+=2', 'a_p=', 1],
 #Punts definits sobre Q
 [10, 19, 13, 'h+=1', 'a_p=', 1],#P=(-3 : 17 : 1)
 [10, 19, 37, 'h+=1', 'a_p=', 1],
 [10, 19, 53, 'h+=1', 'a_p=', 1],
 [10, 19, 173, 'h+=1', 'a_p=', 1],
 [10, 19, 293, 'h+=1', 'a_p=', 1],
 [10, 19, 317, 'h+=1', 'a_p=', 1],
 [10, 19, 357, 'h+=4', 'a_p=', 1],
 [10, 19, 373, 'h+=1', 'a_p=', 1],
 [10, 19, 413, 'h+=2', 'a_p=', 1],
 [10, 19, 493, 'h+=2', 'a_p=', 1],
 [10, 19, 573, 'h+=2', 'a_p=', 1],
 [10, 19, 597, 'h+=2', 'a_p=', 1],
 #punts sobre Q (N=10*29)
 [10, 29, 37, 'h+=1', 'a_p=', -1],#P=(-5 : 4 : 1)
 [10, 29, 77, 'h+=2', 'a_p=', -1],
 [10, 29, 133, 'h+=2', 'a_p=', -1],
 [10, 29, 157, 'h+=1', 'a_p=', -1],
 [10, 29, 213, 'h+=2', 'a_p=', -1],
 [10, 29, 253, 'h+=2', 'a_p=', -1],
 [10, 29, 293, 'h+=1', 'a_p=', -1],
 [10, 29, 317, 'h+=1', 'a_p=', -1],
 [10, 29, 437, 'h+=2', 'a_p=', -1],
 [10, 29, 453, 'h+=2', 'a_p=', -1],
 [10, 29, 533, 'h+=2', 'a_p=', -1],
 [10, 29, 597, 'h+=2', 'a_p=', -1],
 
 [10, 31, 13, 'h+=1', 'a_p=', -1],# no trobo punts naifs
 [10, 31, 37, 'h+=1', 'a_p=', -1],
 [10, 31, 53, 'h+=1', 'a_p=', -1],
 [10, 31, 77, 'h+=2', 'a_p=', -1],
 [10, 31, 197, 'h+=1', 'a_p=', -1],
 [10, 31, 213, 'h+=2', 'a_p=', -1],
 [10, 31, 277, 'h+=1', 'a_p=', -1],
 [10, 31, 437, 'h+=2', 'a_p=', -1],
 [10, 31, 517, 'h+=2', 'a_p=', -1],
 [10, 31, 533, 'h+=2', 'a_p=', -1],
 [10, 31, 557, 'h+=1', 'a_p=', -1],
 [10, 31, 573, 'h+=2', 'a_p=', -1],
 #te punts definits sobre Q
 [10, 37, 13, 'h+=1', 'a_p=', -1],#P=(-2 : 3 : 1)
 [10, 37, 93, 'h+=2', 'a_p=', -1],
 [10, 37, 133, 'h+=2', 'a_p=', -1],
 [10, 37, 237, 'h+=2', 'a_p=', -1],
 [10, 37, 253, 'h+=2', 'a_p=', -1],
 [10, 37, 277, 'h+=1', 'a_p=', -1],
 [10, 37, 357, 'h+=4', 'a_p=', -1],
 [10, 37, 413, 'h+=2', 'a_p=', -1],
 [10, 37, 533, 'h+=2', 'a_p=', -1],
 [10, 37, 557, 'h+=1', 'a_p=', -1],
 [10, 37, 573, 'h+=2', 'a_p=', -1],
 [10, 37, 597, 'h+=2', 'a_p=', -1],
 #punts def sobre Q
 [10, 41, 13, 'h+=1', 'a_p=', 1],#P=(1 : 2 : 1)
 [10, 41, 53, 'h+=1', 'a_p=', 1],
 [10, 41, 93, 'h+=2', 'a_p=', 1],
 [10, 41, 157, 'h+=1', 'a_p=', 1],
 [10, 41, 253, 'h+=2', 'a_p=', 1],
 [10, 41, 293, 'h+=1', 'a_p=', 1],
 [10, 41, 317, 'h+=1', 'a_p=', 1],
 [10, 41, 357, 'h+=4', 'a_p=', 1],
 [10, 41, 397, 'h+=1', 'a_p=', 1],
 [10, 41, 413, 'h+=2', 'a_p=', 1],
 [10, 41, 437, 'h+=2', 'a_p=', 1],
 [10, 41, 557, 'h+=1', 'a_p=', 1],
 #punts def sobre Q
 [10, 43, 37, 'h+=1', 'a_p=', -1],#P=(1 : 4 : 1)
 [10, 43, 77, 'h+=2', 'a_p=', -1],
 [10, 43, 93, 'h+=2', 'a_p=', -1],
 [10, 43, 157, 'h+=1', 'a_p=', -1],
 [10, 43, 237, 'h+=2', 'a_p=', -1],
 [10, 43, 277, 'h+=1', 'a_p=', -1],
 [10, 43, 373, 'h+=1', 'a_p=', -1],
 [10, 43, 413, 'h+=2', 'a_p=', -1],
 [10, 43, 437, 'h+=2', 'a_p=', -1],
 [10, 43, 493, 'h+=2', 'a_p=', -1],
 #punts def sobre Q
 [10, 47, 13, 'h+=1', 'a_p=', -1],#P=(1 : 7 : 1)
 [10, 47, 77, 'h+=2', 'a_p=', -1],
 [10, 47, 93, 'h+=2', 'a_p=', -1],
 [10, 47, 133, 'h+=2', 'a_p=', -1],
 [10, 47, 293, 'h+=1', 'a_p=', -1],
 [10, 47, 317, 'h+=1', 'a_p=', -1],
 [10, 47, 373, 'h+=1', 'a_p=', -1],
 [10, 47, 453, 'h+=2', 'a_p=', -1],
 [10, 47, 493, 'h+=2', 'a_p=', -1],
 [10, 47, 557, 'h+=1', 'a_p=', -1],
 [10, 47, 597, 'h+=2', 'a_p=', -1]]



#D=22

[[22, 3, 29, 'h+=1', 'a_p=', 1],#funciona
 [22, 3, 101, 'h+=1', 'a_p=', 1],
 [22, 3, 149, 'h+=1', 'a_p=', 1],
 [22, 3, 173, 'h+=1', 'a_p=', 1],
 [22, 3, 197, 'h+=1', 'a_p=', 1],
 [22, 3, 293, 'h+=1', 'a_p=', 1],
 [22, 3, 365, 'h+=2', 'a_p=', 1],
 [22, 3, 413, 'h+=2', 'a_p=', 1],
 [22, 3, 437, 'h+=2', 'a_p=', 1],
 [22, 3, 461, 'h+=1', 'a_p=', 1],
 [22, 3, 557, 'h+=1', 'a_p=', 1],
 [22, 5, 13, 'h+=1', 'a_p=', 1],
 [22, 5, 173, 'h+=1', 'a_p=', 1],
 [22, 5, 197, 'h+=1', 'a_p=', 1],
 [22, 5, 237, 'h+=2', 'a_p=', 1],
 [22, 5, 277, 'h+=1', 'a_p=', 1],
 [22, 5, 293, 'h+=1', 'a_p=', 1],
 [22, 5, 373, 'h+=1', 'a_p=', 1],
 [22, 5, 413, 'h+=2', 'a_p=', 1],
 [22, 5, 437, 'h+=2', 'a_p=', 1],
 [22, 5, 453, 'h+=2', 'a_p=', 1],
 [22, 5, 557, 'h+=1', 'a_p=', 1],
 [22, 7, 13, 'h+=1', 'a_p=', -1],
 [22, 7, 61, 'h+=1', 'a_p=', -1],
 [22, 7, 101, 'h+=1', 'a_p=', -1],
 [22, 7, 173, 'h+=1', 'a_p=', -1],
 [22, 7, 237, 'h+=2', 'a_p=', -1],
 [22, 7, 285, 'h+=4', 'a_p=', -1],
 [22, 7, 293, 'h+=1', 'a_p=', -1],
 [22, 7, 349, 'h+=1', 'a_p=', -1],
 [22, 7, 381, 'h+=2', 'a_p=', -1],
 [22, 7, 437, 'h+=2', 'a_p=', -1],
 [22, 7, 453, 'h+=2', 'a_p=', -1],
 [22, 7, 461, 'h+=1', 'a_p=', -1],
 [22, 13, 21, 'h+=2', 'a_p=', 1], #funciona
 [22, 13, 85, 'h+=2', 'a_p=', 1],
 [22, 13, 109, 'h+=1', 'a_p=', 1],
 [22, 13, 149, 'h+=1', 'a_p=', 1],
 [22, 13, 197, 'h+=1', 'a_p=', 1],
 [22, 13, 293, 'h+=1', 'a_p=', 1],
 [22, 13, 349, 'h+=1', 'a_p=', 1],
 [22, 13, 437, 'h+=2', 'a_p=', 1],
 [22, 13, 453, 'h+=2', 'a_p=', 1],
 [22, 13, 461, 'h+=1', 'a_p=', 1],
 [22, 13, 501, 'h+=2', 'a_p=', 1],
 [22, 13, 541, 'h+=1', 'a_p=', 1],
 [22, 13, 557, 'h+=1', 'a_p=', 1],
 [22, 17, 29, 'h+=1', 'a_p=', -1],
 [22, 17, 61, 'h+=1', 'a_p=', -1],
 [22, 17, 109, 'h+=1', 'a_p=', -1],
 [22, 17, 173, 'h+=1', 'a_p=', -1],
 [22, 17, 197, 'h+=1', 'a_p=', -1],
 [22, 17, 277, 'h+=1', 'a_p=', -1],
 [22, 17, 381, 'h+=2', 'a_p=', -1],
 [22, 17, 413, 'h+=2', 'a_p=', -1],
 [22, 17, 437, 'h+=2', 'a_p=', -1],
 [22, 17, 453, 'h+=2', 'a_p=', -1],
 [22, 17, 469, 'h+=6', 'a_p=', -1],
 [22, 17, 541, 'h+=1', 'a_p=', -1],
 [22, 17, 589, 'h+=2', 'a_p=', -1],
 [22, 19, 13, 'h+=1', 'a_p=', 1],
 [22, 19, 21, 'h+=2', 'a_p=', 1],
 [22, 19, 29, 'h+=1', 'a_p=', 1],
 [22, 19, 109, 'h+=1', 'a_p=', 1],
 [22, 19, 173, 'h+=1', 'a_p=', 1],
 [22, 19, 205, 'h+=4', 'a_p=', 1],
 [22, 19, 293, 'h+=1', 'a_p=', 1],
 [22, 19, 373, 'h+=1', 'a_p=', 1],
 [22, 19, 413, 'h+=2', 'a_p=', 1],
 [22, 19, 469, 'h+=6', 'a_p=', 1],
 [22, 23, 21, 'h+=2', 'a_p=', -1],
 [22, 23, 61, 'h+=1', 'a_p=', -1],
 [22, 23, 109, 'h+=1', 'a_p=', -1],
 [22, 23, 149, 'h+=1', 'a_p=', -1],
 [22, 23, 205, 'h+=4', 'a_p=', -1],
 [22, 23, 237, 'h+=2', 'a_p=', -1],
 [22, 23, 293, 'h+=1', 'a_p=', -1],
 [22, 23, 365, 'h+=2', 'a_p=', -1],
 [22, 23, 373, 'h+=1', 'a_p=', -1],
 [22, 23, 413, 'h+=2', 'a_p=', -1],
 [22, 23, 557, 'h+=1', 'a_p=', -1],
 [22, 23, 589, 'h+=2', 'a_p=', -1],
 [22, 31, 13, 'h+=1', 'a_p=', 1],
 [22, 31, 21, 'h+=2', 'a_p=', 1],
 [22, 31, 29, 'h+=1', 'a_p=', 1],
 [22, 31, 61, 'h+=1', 'a_p=', 1],
 [22, 31, 85, 'h+=2', 'a_p=', 1],
 [22, 31, 197, 'h+=1', 'a_p=', 1],
 [22, 31, 277, 'h+=1', 'a_p=', 1],
 [22, 31, 285, 'h+=4', 'a_p=', 1],
 [22, 31, 365, 'h+=2', 'a_p=', 1],
 [22, 31, 437, 'h+=2', 'a_p=', 1],
 [22, 31, 461, 'h+=1', 'a_p=', 1],
 [22, 31, 557, 'h+=1', 'a_p=', 1],
 [22, 37, 13, 'h+=1', 'a_p=', 1],
 [22, 37, 29, 'h+=1', 'a_p=', 1],
 [22, 37, 61, 'h+=1', 'a_p=', 1],
 [22, 37, 109, 'h+=1', 'a_p=', 1],
 [22, 37, 205, 'h+=4', 'a_p=', 1],
 [22, 37, 237, 'h+=2', 'a_p=', 1],
 [22, 37, 277, 'h+=1', 'a_p=', 1],
 [22, 37, 365, 'h+=2', 'a_p=', 1],
 [22, 37, 413, 'h+=2', 'a_p=', 1],
 [22, 37, 461, 'h+=1', 'a_p=', 1],
 [22, 37, 501, 'h+=2', 'a_p=', 1],
 [22, 37, 541, 'h+=1', 'a_p=', 1],
 [22, 37, 557, 'h+=1', 'a_p=', 1],
 [22, 41, 13, 'h+=1', 'a_p=', -1],
 [22, 41, 29, 'h+=1', 'a_p=', -1],
 [22, 41, 85, 'h+=2', 'a_p=', -1],
 [22, 41, 101, 'h+=1', 'a_p=', -1],
 [22, 41, 109, 'h+=1', 'a_p=', -1],
 [22, 41, 149, 'h+=1', 'a_p=', -1],
 [22, 41, 293, 'h+=1', 'a_p=', -1],
 [22, 41, 381, 'h+=2', 'a_p=', -1],
 [22, 41, 413, 'h+=2', 'a_p=', -1],
 [22, 41, 437, 'h+=2', 'a_p=', -1],
 [22, 41, 557, 'h+=1', 'a_p=', -1],
 [22, 41, 589, 'h+=2', 'a_p=', -1],
 [22, 43, 29, 'h+=1', 'a_p=', 1],
 [22, 43, 61, 'h+=1', 'a_p=', 1],
 [22, 43, 85, 'h+=2', 'a_p=', 1],
 [22, 43, 149, 'h+=1', 'a_p=', 1],
 [22, 43, 205, 'h+=4', 'a_p=', 1],
 [22, 43, 237, 'h+=2', 'a_p=', 1],
 [22, 43, 277, 'h+=1', 'a_p=', 1],
 [22, 43, 285, 'h+=4', 'a_p=', 1],
 [22, 43, 349, 'h+=1', 'a_p=', 1],
 [22, 43, 373, 'h+=1', 'a_p=', 1],
 [22, 43, 381, 'h+=2', 'a_p=', 1],
 [22, 43, 413, 'h+=2', 'a_p=', 1],
 [22, 43, 437, 'h+=2', 'a_p=', 1],
 [22, 43, 469, 'h+=6', 'a_p=', 1],
 [22, 43, 501, 'h+=2', 'a_p=', 1],
 [22, 43, 589, 'h+=2', 'a_p=', 1],
 [22, 47, 13, 'h+=1', 'a_p=', 1],
 [22, 47, 29, 'h+=1', 'a_p=', 1],
 [22, 47, 85, 'h+=2', 'a_p=', 1],
 [22, 47, 109, 'h+=1', 'a_p=', 1],
 [22, 47, 293, 'h+=1', 'a_p=', 1],
 [22, 47, 349, 'h+=1', 'a_p=', 1],
 [22, 47, 373, 'h+=1', 'a_p=', 1],
 [22, 47, 381, 'h+=2', 'a_p=', 1],
 [22, 47, 453, 'h+=2', 'a_p=', 1],
 [22, 47, 461, 'h+=1', 'a_p=', 1],
 [22, 47, 469, 'h+=6', 'a_p=', 1],
 [22, 47, 501, 'h+=2', 'a_p=', 1],
 [22, 47, 557, 'h+=1', 'a_p=', 1]]


